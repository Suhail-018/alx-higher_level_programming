# How to Use matrix_divided function
====================================

This function divides all elements of a matrix by a number and rounds to 2 decimal places.

Numbers
=======

Let's start by testing the function with numbers.
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix = [[10, 20, 30], [40, 50, 60]]
>>> matrix_divided(matrix, 5)
[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0]]

Floating-Point Numbers
=======================

The function also works with floating-point numbers.

>>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> matrix_divided(matrix, 2)
[[0.75, 1.25, 1.75], [2.25, 2.75, 3.25]]

>>> matrix = [[0.1, 0.2], [0.3, 0.4]]
>>> matrix_divided(matrix, 0.1)
[[1.0, 2.0], [3.0, 4.0]]

Non-Numbers and not equal rows
==============================

The function should raise a TypeError if the input is not valid.

>>> matrix = "not_a_matrix"
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2, 3], [4, "5", 6]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> matrix = [[1, 2, 3], [4, 6]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size
